'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _stylelint = require('stylelint');

var _stylelint2 = _interopRequireDefault(_stylelint);

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Class representing a StylelintError.
 * @extends Error
 */
var StylelintError = function (_Error) {
  _inherits(StylelintError, _Error);

  /**
   * Create a StylelintError.
   * @param {string} messages - Formatted stylelint errors.
   */
  function StylelintError(messages) {
    _classCallCheck(this, StylelintError);

    var _this = _possibleConstructorReturn(this, (StylelintError.__proto__ || Object.getPrototypeOf(StylelintError)).call(this));

    _this.name = 'StylelintError';
    _this.message = messages;
    _this.stack = '';
    return _this;
  }

  /**
   * Returns a stringified representation of our error. This is called
   * when an error is consumed by console methods
   * ex: console.error(new StylelintError(formattedMessage))
   * @return {string} error - A stringified representation of the error.
   */


  _createClass(StylelintError, [{
    key: 'inspect',
    value: function inspect() {
      return this.message;
    }
  }]);

  return StylelintError;
}(Error);

// eslint-disable-next-line func-names


module.exports = function (content) {
  var _this2 = this;

  var options = _loaderUtils2.default.getOptions(this);
  var lintArgument = {
    code: content,
    codeFilename: this.resourcePath,
    formatter: 'string'
  };

  // shortcut for emitWarning option
  var emitWarning = options && options.emitWarning;

  if (options && options.configPath) {
    var processedPath = _loaderUtils2.default.stringifyRequest(this, options.configPath);
    processedPath = processedPath.substring(1, processedPath.length - 1);
    lintArgument.configFile = processedPath;
  }
  var callback = this.async();
  _stylelint2.default.lint(lintArgument).then(function (resultObject) {
    var output = resultObject.output;

    if (resultObject.errored && !emitWarning) {
      _this2.emitError(new StylelintError(output));
    } else if (output) {
      _this2.emitWarning(new StylelintError(output));
    }
    callback(null, content);
  }).catch(function (e) {
    callback(e);
  });
};
